cmake_minimum_required(VERSION 3.16)

project(eggsizerML VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

IF(WIN32)
    # Extra IF so that devs can use either msvc or mingw
    # (Jax says ALWAYS use mingw, msvc SUCKS)
    IF(EXISTS "C:/6.8.2/msvc2022_64/lib/cmake/Qt6")
        set(OpenCV_DIR "C:/tools/opencv/build")
        set(QT_DIR "C:/6.8.2/msvc2022_64/lib/cmake/Qt6")
        set(Qt6_DIR "C:/6.8.2/msvc2022_64/lib/cmake/Qt6")
        set(CMAKE_CXX_COMPILER "gcc")
    ENDIF()
ENDIF()

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
find_package(OpenCV REQUIRED)

set(PROJECT_SOURCES
        src/main.cpp
        src/eggsizerml.cpp
        src/eggsizerml.ui
        src/cannyDetect.cpp
        include/eggsizerml.h
        include/asmOpenCV.h
        include/cannyDetect.h
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(eggsizerML
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET eggsizerML APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(eggsizerML SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(eggsizerML
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_link_libraries(eggsizerML PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_include_directories(eggsizerML PRIVATE ${OpenCV_INCLUDE_DIRS})
target_link_libraries(eggsizerML PRIVATE ${OpenCV_LIBS})

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.eggsizerML)
endif()
set_target_properties(eggsizerML PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS eggsizerML
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(eggsizerML)
endif()

# runs doxygen documentation upon build (can remove if this is redundant)
find_package(Doxygen)
if (DOXYGEN_FOUND)
    # Doxygen configuration goes here
else()
    message(STATUS "Doxygen not found. Documentation will not be generated.")
endif()
