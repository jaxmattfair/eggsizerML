cmake_minimum_required(VERSION 3.16)

project(eggsizerML VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Boost REQUIRED COMPONENTS unit_test_framework)

IF(WIN32)
	set(OpenCV_DIR "C:/tools/opencv/build")
	set(QT_DIR "C:/6.8.2/msvc2022_64/lib/cmake/Qt6")
	set(Qt6_DIR "C:/6.8.2/msvc2022_64/lib/cmake/Qt6")
	set(CMAKE_CXX_COMPILER "gcc")
ENDIF()

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
find_package(OpenCV REQUIRED)

set(PROJECT_SOURCES
        main.cpp
        eggsizerml.cpp
        eggsizerml.h
        eggsizerml.ui
        edge_detection.cpp
        edge_detection.hpp
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(eggsizerML
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET eggsizerML APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(eggsizerML SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(eggsizerML
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_link_libraries(eggsizerML PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_include_directories(eggsizerML PRIVATE ${OpenCV_INCLUDE_DIRS})
target_link_libraries(eggsizerML PRIVATE ${OpenCV_LIBS})

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.eggsizerML)
endif()
set_target_properties(eggsizerML PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS eggsizerML
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(eggsizerML)
endif()

# TESTING SECTION
enable_testing()

set(TEST_SOURCES
    tests/edge_detection_test.cpp
    edge_detection.cpp
)

# executable for running tests
add_executable(edge_detection_test ${TEST_SOURCES})
# link Boost and OpenCV libraries
target_link_libraries(edge_detection_test PRIVATE ${OpenCV_LIBS} Boost::unit_test_framework)
target_include_directories(edge_detection_test PRIVATE ${CMAKE_SOURCE_DIR})
# register test
add_test(NAME EdgeDetectionTest COMMAND edge_detection_test)

# runs doxygen documentation upon build (can remove if this is redundant)
find_package(Doxygen REQUIRED)

if (DOXYGEN_FOUND)
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/docs)

    add_custom_target(doc_doxygen
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_IN}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM)
else()
    message(FATAL_ERROR "Doxygen is required but was not found. Please install it.")
endif()
